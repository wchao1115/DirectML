{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    
    "title": "Model",
    "description": "A model file",
    "type": "object",
    "required": [ "resources", "dispatchables", "commands" ],

    "properties": 
    {
        "resources": 
        {
            "type": "object",
            "description": "D3D12 resources available for binding",
            "patternProperties": { ".*": { "$ref": "#/$defs/resource" } }
        },
        "dispatchables": 
        {
            "type": "object",
            "description": "Compute programs available for execution",
            "patternProperties": { ".*": { "$ref": "#/$defs/dispatchable" } }
        },
        "commands": 
        {
            "type": "array",
            "description": "Commands to process when running the model",
            "items": { "$ref": "#/$defs/command" }
        }
    },

    "$defs": 
    {
        "dmlTensorDataType": 
        {
            "enum": 
            [
                "DML_TENSOR_DATA_TYPE_UNKNOWN",
                "UNKNOWN",
                "DML_TENSOR_DATA_TYPE_FLOAT16",
                "FLOAT16",
                "DML_TENSOR_DATA_TYPE_FLOAT32",
                "FLOAT32",
                "DML_TENSOR_DATA_TYPE_FLOAT64",
                "FLOAT64",
                "DML_TENSOR_DATA_TYPE_UINT8",
                "UINT8",
                "DML_TENSOR_DATA_TYPE_UINT16",
                "UINT16",
                "DML_TENSOR_DATA_TYPE_UINT32",
                "UINT32",
                "DML_TENSOR_DATA_TYPE_UINT64",
                "UINT64",
                "DML_TENSOR_DATA_TYPE_INT8",
                "INT8",
                "DML_TENSOR_DATA_TYPE_INT16",
                "INT16",
                "DML_TENSOR_DATA_TYPE_INT32",
                "INT32",
                "DML_TENSOR_DATA_TYPE_INT64",
                "INT64"
            ]
        },

        "dmlExecutionFlags": 
        {
            "enum": 
            [
                "DML_EXECUTION_FLAG_NONE",
                "NONE",
                "DML_EXECUTION_FLAG_ALLOW_HALF_PRECISION_COMPUTATION",
                "ALLOW_HALF_PRECISION_COMPUTATION",
                "DML_EXECUTION_FLAG_DISABLE_META_COMMANDS",
                "DISABLE_META_COMMANDS",
                "DML_EXECUTION_FLAG_DESCRIPTORS_VOLATILE",
                "DESCRIPTORS_VOLATILE"
            ]
        },

        "dmlCompileType":
        {
            "enum":
            [
                "DmlCompileOp",
                "DmlCompileGraph"
            ]
        },

        "arrayInitializer":
        {
            "type": "array",
            "description": "Elements used to initialize the buffer contents",
            "items": ["number", "string"]
        },

        "constantInitializer": 
        {
            "type": "object",
            "properties": 
            {
                "valueCount": 
                {
                    "type": "integer",
                    "exclusiveMinimum": 0,
                    "description": "Length of the buffer in elements"
                },
                "value": 
                {
                    "type": ["number", "string"],
                    "description": "Value to fill"
                }
            },
            "required": [ "valueCount", "value" ]
        },

        "sequenceInitializer": 
        {
            "type": "object",
            "properties": 
            {
                "valueCount": 
                {
                    "type": "integer",
                    "exclusiveMinimum": 0,
                    "description": "Length of the buffer in elements"
                },
                "valueStart": 
                {
                    "type": ["number", "string"],
                    "description": "First value in the buffer"
                },
                "valueDelta": 
                {
                    "type": ["number", "string"],
                    "description": "Delta between elements in the buffer"
                }
            },
            "required": [ "valueCount", "valueStart", "valueDelta" ]
        },

        "buffer": 
        {
            "type": "object",
            "properties": 
            {
                "initialValues": 
                { 
                    "oneOf":
                    [
                        { "$ref": "#/$defs/arrayInitializer" },
                        { "$ref": "#/$defs/constantInitializer" },
                        { "$ref": "#/$defs/sequenceInitializer" }
                    ],
                    "description": "Initial values in the buffer"
                },
                "initialValuesDataType": 
                { 
                    "$ref": "#/$defs/dmlTensorDataType",
                    "description": "Data type of the elements in 'initialValues'"
                },
                "initialValuesOffsetInBytes":
                {
                    "type": "integer",
                    "inclusiveMinimum": 0,
                    "description": "Offset to start writing initialValues in the buffer.",
                    "default": 0
                },
                "sizeInBytes":
                {
                    "type": "integer",
                    "exclusiveMinimum": 0,
                    "description": "Size of the buffer. Must be at least as large as size of initialValues."
                }
            },
            "required": [ "initialValues", "initialValuesDataType" ]
        },

        "texture":
        {
            "type": "object",
            "properties":
            {
                "width": { "type": "integer", "minimum": 1, "description": "Texture width in texels" },
                "height": { "type": "integer", "minimum": 1, "description": "Texture height in texels" },
                "format": { "type": "string", "description": "DXGI_FORMAT (defaults to R8G8B8A8_UNORM if omitted)" },
                "dimension": { "type": "string", "enum": ["2D"], "description": "Texture dimension (currently only 2D supported)", "default": "2D" },
                "mipLevels": { "type": "integer", "minimum": 1, "maximum": 1, "description": "Number of mip levels (currently must be 1)", "default": 1 },
                "arraySize": { "type": "integer", "minimum": 1, "maximum": 1, "description": "Array size (currently must be 1)", "default": 1 },
                "usage": { "type": "string", "enum": ["srv"], "description": "Intended binding usage (currently only 'srv')", "default": "srv" },
                "initialValues": {
                    "description": "Optional initial data: object with sourcePath or raw byte array",
                    "oneOf": [
                        { "type": "object", "properties": { "sourcePath": { "type": "string" } }, "required": ["sourcePath"] },
                        { "type": "array", "items": { "type": "integer", "minimum": 0, "maximum": 255 } }
                    ]
                }
            },
            "required": ["width", "height"],
            "additionalProperties": true
        },

        "sampler":
        {
            "type": "object",
            "properties":
            {
                "filter": { "type": "string", "enum": ["point", "linear", "anisotropic"], "description": "Sampler filter mode", "default": "linear" },
                "addressU": { "type": "string", "enum": ["wrap","clamp","mirror","border","mirror_once"], "default": "wrap" },
                "addressV": { "type": "string", "enum": ["wrap","clamp","mirror","border","mirror_once"], "default": "wrap" },
                "addressW": { "type": "string", "enum": ["wrap","clamp","mirror","border","mirror_once"], "default": "wrap" },
                "mipLODBias": { "type": "number", "default": 0.0 },
                "maxAnisotropy": { "type": "integer", "minimum": 1, "default": 1 },
                "comparisonFunc": { "type": "string", "enum": ["less","lequal","greater","gequal","equal","notequal","never","always"], "default": "always" },
                "borderColor": { "type": "array", "items": { "type": "number" }, "minItems": 4, "maxItems": 4 },
                "minLOD": { "type": "number", "default": 0.0 },
                "maxLOD": { "type": "number", "default": 3.402823e+38 }
            },
            "additionalProperties": true
        },

        "resource":
        {
            "type": "object",
            "properties": {
                "kind": { "type": "string", "enum": ["buffer","texture","sampler"], "default": "buffer", "description": "Resource kind discriminator (buffer|texture|sampler). If omitted, defaults to buffer." }
            },
            "allOf": [
                { "if": { "properties": { "kind": { "const": "texture" } } }, "then": { "$ref": "#/$defs/texture" } },
                { "if": { "properties": { "kind": { "const": "sampler" } } }, "then": { "$ref": "#/$defs/sampler" } },
                { "if": { "anyOf": [ { "properties": { "kind": { "const": "buffer" } } }, { "not": { "required": ["kind"] } } ] }, "then": { "$ref": "#/$defs/buffer" } }
            ]
        },
    
        "hlslDispatchable": 
        {
            "type": "object",
            "properties": 
            {
                "sourcePath": 
                {
                    "type": "string",
                    "description": "Path to the HLSL source file"
                },
                "compiler": 
                {
                    "type": "string",
                    "enum": [ "dxc" ],
                    "description": "The HLSL compiler"
                },
                "compilerArgs": 
                {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Arguments for the HLSL compiler"
                }
            },
            "required": [ "sourcePath", "compiler", "compilerArgs" ]
        },
        
        "dmlDispatchable": 
        {
            "type": "object",
            "properties": 
            {
                "desc": 
                { 
                    "type": "object",
                    "description": "The DML_OPERATOR_DESC"
                },
                "executionFlags":
                {
                    "type": "array",
                    "items": { "$ref": "#/$defs/dmlExecutionFlags" },
                    "description": "A list of DML_EXECUTION_FLAGS values",
                    "default": ["NONE"]
                }
            },
            "required": [ "desc" ]
        },

        "onnxDispatchable": 
        {
            "type": "object",
            "properties": 
            {
                "sourcePath": 
                {
                    "type": "string",
                    "description": "Path to the ONNX model file"
                },
                "freeDimensionNameOverrides": 
                { 
                    "type": "object",
                    "description": "Dictionary of dimension names to override. Each member (symbolic dimension name) should map to an integer."
                },
                "freeDimensionDenotationOverrides": 
                { 
                    "type": "object",
                    "description": "Dictionary of denotation names to override. Each member (denotation name) should map to an integer."
                },
                "sessionOptionsConfigEntries": 
                { 
                    "type": "object",
                    "description": "Dictionary of config entries for SessionOptions. Each member (key) should map to string (value)."
                },
                "graphOptimizationLevel": 
                {
                    "type": "integer",
                    "description": "OrtGraphOptimizationLevel. 0 = None, 1 = Basic, 2 = Extended, 99 = All.",
                    "default": 99
                },
                "loggingLevel": 
                {
                    "type": "integer",
                    "description": "OrtLoggingLevel. 0 = Verbose, 1 = Info, 2 = Warning, 3 = Error, 4 = Fatal.",
                    "default": 2
                }
            },
            "required": [ "sourcePath" ]
        },

        "dispatchable": 
        {
            "type": "object",
            "properties":
            {
                "type": 
                {
                    "type": "string",
                    "description": "The type of dispatchable"
                }
            },
            "required": ["type"],
            "if": { "properties": { "type": { "const": "hlsl" } } },
            "then": { "$ref": "#/$defs/hlslDispatchable" },
            "else": { 
                "if": { "properties": { "type": { "const": "onnx" } } },
                "then": { "$ref": "#/$defs/onnxDispatchable" },
                "else": { 
                    "$ref": "#/$defs/dmlDispatchable" 
                }
            }
        },
        
        "binding": 
        {
            "type": "object",
            "properties": 
            {
                "name": 
                {
                    "type": "string",
                    "description": "The name of the resource in the model"
                },
                "format": 
                {
                    "type": "string",
                    "description": "The DXGI_FORMAT associated with the resource view"
                },
                "elementCount": 
                {
                    "type": "integer",
                    "description": "The number of elements in the source buffer"
                },
                "elementSizeInBytes": 
                {
                    "type": "integer",
                    "description": "The size of each element/structure in the source buffer"
                },
                "elementOffset": 
                {
                    "type": "integer",
                    "description": "The offset to the first element in the source buffer"
                },
                "counter": 
                {
                    "type": "string",
                    "description": "The name of the counter resource in the model"
                },
                "shape":
                {
                    "type": "array",
                    "items": { "type": "integer", "exclusiveMinimum": 0 },
                    "description": "Optional shape for tensor bindings in ONNX dispatchables."
                }
            }
        },

        "dispatchCommand":
        {
            "type": "object",
            "properties":
            {
                "dispatchable":
                {
                    "type": "string",
                    "description": "Name of the dispatchable to execute"
                },
                "bindings":
                {
                    "type": "object",
                    "description": "Resource bindings for execution",
                    "patternProperties": 
                    {
                        ".*": {
                            "oneOf":
                            [
                                { "$ref": "#/$defs/binding" },
                                { "type": "string" },
                                { 
                                    "type": "array",
                                    "items": { 
                                        "oneOf": [
                                            { "$ref": "#/$defs/binding" },
                                            { "type": "string" }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                },
                "threadGroupCount":
                {
                    "type": "array",
                    "items": { "type": "integer", "exclusiveMinimum": 0 },
                    "minItems": 3,
                    "maxItems": 3,
                    "description": "Number of thread groups in X,Y,Z for each dispatch",
                    "default": [1, 1, 1]
                }
            },
            "required": ["dispatchable", "bindings"]
        },

        "printCommand":
        {
            "type": "object",
            "properties":
            {
                "resource":
                {
                    "type": "string",
                    "description": "Name of the resource to display"
                },
                "verbose":
                {
                    "type": "boolean",
                    "description": "Whether to print raw data values too"
                }
            },
            "required": ["resource"]
        },

        "command": 
        {
            "type": "object",
            "properties":
            {
                "type": 
                {
                    "type": "string",
                    "enum": ["dispatch", "print"],
                    "description": "The type of command"
                }
            },
            "required": ["type"],
            "allOf":
            [
                {
                    "if": { "properties": { "type": { "const": "dispatch" } } },
                    "then": { "$ref": "#/$defs/dispatchCommand" }
                },
                {
                    "if": { "properties": { "type": { "const": "print" } } },
                    "then": { "$ref": "#/$defs/printCommand" }
                }
            ]
        }
    }
}